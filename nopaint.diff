diff --git a/.gitignore b/.gitignore
index bb76f8de..0d0a89a4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,4 +14,4 @@ quazip
 *.exe
 snapshots
 .vscode
-
+build-*
diff --git a/src/app/CMakeLists.txt b/src/app/CMakeLists.txt
index b6bf2b9e..21e5f23b 100644
--- a/src/app/CMakeLists.txt
+++ b/src/app/CMakeLists.txt
@@ -100,7 +100,7 @@ set(QUAZIP_LIBRARIES_DIRS "/usr/lib" CACHE STRING "quazip library path")
 set(QUAZIP_LIBRARIES "quazip5" CACHE STRING "quazip library")
 set(QUAZIP_INCLUDE_DIRS "/usr/include/quazip5" CACHE STRING "quazip includes path")
 
-pkg_search_module(MYPAINT REQUIRED libmypaint)
+#pkg_search_module(MYPAINT REQUIRED libmypaint)
 pkg_check_modules(AVFORMAT REQUIRED libavformat)
 pkg_check_modules(AVCODEC REQUIRED libavcodec)
 pkg_check_modules(AVUTIL REQUIRED libavutil)
@@ -113,7 +113,7 @@ if(UNIX AND NOT ${SHARED_TCMALLOC})
 endif()
 
 include_directories(
-    ${MYPAINT_INCLUDE_DIRS}
+    #${MYPAINT_INCLUDE_DIRS}
     ${QUAZIP_INCLUDE_DIRS}
     ${QSCINTILLA_INCLUDE_DIRS}
     ${AVFORMAT_INCLUDE_DIRS}
@@ -193,7 +193,7 @@ set(
     GUI/canvasbasewrappernode.cpp
     GUI/canvaswindowevents.cpp
     GUI/canvaswrappernode.cpp
-    GUI/centralwidget.cpp
+    #GUI/centralwidget.cpp
     GUI/changewidthwidget.cpp
     GUI/closesignalingdockwidget.cpp
     GUI/ecombobox.cpp
@@ -319,7 +319,7 @@ set(
     GUI/buttonslist.h
     GUI/canvasbasewrappernode.h
     GUI/canvaswrappernode.h
-    GUI/centralwidget.h
+    #GUI/centralwidget.h
     GUI/changewidthwidget.h
     GUI/closesignalingdockwidget.h
     GUI/ecombobox.h
@@ -419,7 +419,7 @@ add_executable(
     ${HEADERS}
     ${SOURCES}
     resources.qrc
-    brushes.qrc
+    #brushes.qrc
     icons.qrc
     hicolor.qrc
 )
@@ -474,7 +474,7 @@ target_link_libraries(
     Qt${QT_VERSION_MAJOR}::Qml
     Qt${QT_VERSION_MAJOR}::Xml
     Qt${QT_VERSION_MAJOR}::Svg
-    ${MYPAINT_LIBRARIES}
+    #${MYPAINT_LIBRARIES}
     ${QUAZIP_LIBRARIES}
     ${QSCINTILLA_LIBRARIES}
     ${AVFORMAT_LIBRARIES}
diff --git a/src/app/GUI/BrushWidgets/brushselectionwidget.cpp b/src/app/GUI/BrushWidgets/brushselectionwidget.cpp
index 20491cc7..c84e6d0e 100755
--- a/src/app/GUI/BrushWidgets/brushselectionwidget.cpp
+++ b/src/app/GUI/BrushWidgets/brushselectionwidget.cpp
@@ -33,12 +33,12 @@ BrushSelectionWidget::BrushSelectionWidget(BrushesContext& context,
     QTabWidget(parent), mContext(context) {
     setSizePolicy(QSizePolicy::Preferred, sizePolicy().verticalPolicy());
 
-    setupBookmarksTab();
-    updateBrushes();
+    //setupBookmarksTab();
+    //updateBrushes();
 }
 
 void BrushSelectionWidget::setupBookmarksTab() {
-    mBookmarksScroll = new ScrollArea(this);
+    /*mBookmarksScroll = new ScrollArea(this);
     const auto tabWidget = new QWidget(this);
     const auto tabWidgetLay = new FlowLayout(tabWidget, 0, 0, 0);
     connect(&mContext, &BrushesContext::bookmarkAdded,
@@ -60,11 +60,12 @@ void BrushSelectionWidget::setupBookmarksTab() {
 
     tabWidget->setLayout(tabWidgetLay);
     mBookmarksScroll->setWidget(tabWidget);
-    mBookmarksScroll->hide();
+    mBookmarksScroll->hide();*/
 }
 
 void BrushSelectionWidget::setNumberBookmarked(const int bookmarked) {
-    if(mNumberBookmarked == bookmarked) return;
+    Q_UNUSED(bookmarked)
+    /*if(mNumberBookmarked == bookmarked) return;
     if(mNumberBookmarked == 0 && bookmarked > 0) {
         insertTab(0, mBookmarksScroll, "Bookmarks");
         mBookmarksScroll->show();
@@ -72,11 +73,11 @@ void BrushSelectionWidget::setNumberBookmarked(const int bookmarked) {
         removeTab(0);
         mBookmarksScroll->hide();
     }
-    mNumberBookmarked = bookmarked;
+    mNumberBookmarked = bookmarked;*/
 }
 
 void BrushSelectionWidget::updateBrushes() {
-    for(const auto& coll : mContext.fCollections) {
+    /*for(const auto& coll : mContext.fCollections) {
         const auto tabScroll = new ScrollArea(this);
         const auto tabWidget = new QWidget(this);
         const auto tabWidgetLay = new FlowLayout(tabWidget, 0, 0, 0);
@@ -91,39 +92,44 @@ void BrushSelectionWidget::updateBrushes() {
         tabWidget->setLayout(tabWidgetLay);
         tabScroll->setWidget(tabWidget);
         addTab(tabScroll, coll.fName);
-    }
+    }*/
 }
 
 qsptr<BrushesContext> BrushSelectionWidget::sCreateNewContext() {
-    if(!sLoaded) {
+    /*if(!sLoaded) {
         const QString brushesDir = eSettings::sSettingsDir() + "/brushes";
         sLoadCollectionsFromDir(brushesDir);
         sLoadCollectionsFromDir(":/brushes");
         sLoaded = true;
     }
-    return enve::make_shared<BrushesContext>(BrushCollectionData::sData);
+    return enve::make_shared<BrushesContext>(BrushCollectionData::sData);*/
+    return nullptr;
 }
 
 void BrushSelectionWidget::setCurrentBrush(SimpleBrushWrapper * const wrapper) {
-    if(mSelected && mSelected->getSimpleBrush() == wrapper) return;
-    mContext.setSelectedWrapper(wrapper);
+    Q_UNUSED(wrapper)
+    //if(mSelected && mSelected->getSimpleBrush() == wrapper) return;
+    //mContext.setSelectedWrapper(wrapper);
 }
 
 SimpleBrushWrapper *BrushSelectionWidget::getCurrentBrush() {
-    if(mSelected)
-        return mSelected->getSimpleBrush();
+    //if(mSelected)
+        //return mSelected->getSimpleBrush();
     return nullptr;
 }
 
 void BrushSelectionWidget::brushCWrapperSelected(BrushContexedWrapper *wrapper) {
-    if(mSelected && mSelected != wrapper)
+    Q_UNUSED(wrapper)
+    /*if(mSelected && mSelected != wrapper)
         mSelected->setSelected(false);
     mSelected = wrapper;
-    emit currentBrushChanged(wrapper);
+    emit currentBrushChanged(wrapper);*/
 }
 
 void loadBrushFromFile(const QString &path, BrushCollectionData& coll) {
-    QFile dataFile(path);
+    Q_UNUSED(path)
+    Q_UNUSED(coll)
+    /*QFile dataFile(path);
     if(!dataFile.exists()) return;
     if(!dataFile.open(QIODevice::ReadOnly)) return;
     const QByteArray wholeFile = dataFile.readAll();
@@ -150,12 +156,14 @@ void loadBrushFromFile(const QString &path, BrushCollectionData& coll) {
                 coll.fName, brushName,
                 brush, wholeFile);
     coll.fBrushes.append({ brushName, brushWrapper,
-                           icon, wholeFile });
+                           icon, wholeFile });*/
 }
 
 void loadCollectionFromDir(const QString &mainDirPath,
                            QList<BrushCollectionData> &data) {
-    BrushCollectionData collection;
+    Q_UNUSED(mainDirPath)
+    Q_UNUSED(data)
+    /*BrushCollectionData collection;
     const QDir brushesDir(mainDirPath);
     collection.fName = brushesDir.dirName();
     const QDir::Filters filter = QDir::NoDotAndDotDot | QDir::AllEntries;
@@ -168,11 +176,12 @@ void loadCollectionFromDir(const QString &mainDirPath,
             loadBrushFromFile(fileInfo.absoluteFilePath(), collection);
         }
     }
-    data << collection;
+    data << collection;*/
 }
 
 void BrushSelectionWidget::sLoadCollectionsFromDir(const QString &mainDirPath) {
-    const QDir brushesDir(mainDirPath);
+    Q_UNUSED(mainDirPath)
+    /*const QDir brushesDir(mainDirPath);
     if(!brushesDir.exists()) brushesDir.mkpath(mainDirPath);
     const QDir::Filters filter = QDir::NoDotAndDotDot | QDir::AllEntries;
     const QFileInfoList entryList = brushesDir.entryInfoList(filter);
@@ -182,5 +191,5 @@ void BrushSelectionWidget::sLoadCollectionsFromDir(const QString &mainDirPath) {
             const QString collDirPath = fileInfo.absoluteFilePath();
             loadCollectionFromDir(collDirPath, BrushCollectionData::sData);
         }
-    }
+    }*/
 }
diff --git a/src/app/GUI/fillstrokesettings.cpp b/src/app/GUI/fillstrokesettings.cpp
index 7d0cf939..be249e33 100755
--- a/src/app/GUI/fillstrokesettings.cpp
+++ b/src/app/GUI/fillstrokesettings.cpp
@@ -30,7 +30,7 @@
 #include "Animators/gradient.h"
 #include "Private/esettings.h"
 #include "Private/document.h"
-#include "BrushWidgets/brushlabel.h"
+//#include "BrushWidgets/brushlabel.h"
 #include "GUI/global.h"
 
 FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
@@ -76,17 +76,17 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
     connect(mFillGradientButton, &QPushButton::released,
             this, &FillStrokeSettingsWidget::setGradientFillAction);
 
-    mFillBrushButton = new QPushButton(
+    /*mFillBrushButton = new QPushButton(
                 QIcon(iconsDir + "/fill_brush.png"),
                 "Brush", this);
     mFillBrushButton->setCheckable(true);
     mFillBrushButton->setObjectName("middleButton");
     connect(mFillBrushButton, &QPushButton::released,
-            this, &FillStrokeSettingsWidget::setBrushFillAction);
+            this, &FillStrokeSettingsWidget::setBrushFillAction);*/
 
     mColorTypeLayout->addWidget(mFillNoneButton);
     mColorTypeLayout->addWidget(mFillFlatButton);
-    mColorTypeLayout->addWidget(mFillBrushButton);
+    //mColorTypeLayout->addWidget(mFillBrushButton);
     mColorTypeLayout->addWidget(mFillGradientButton);
 
     mFillTargetButton->setCheckable(true);
@@ -96,25 +96,17 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
     mTargetLayout->addWidget(mFillTargetButton);
     mTargetLayout->addWidget(mStrokeTargetButton);
 
-    //mLineWidthSpin = new QDoubleSpinBox(this);
+    QWidget *lineWidget = new QWidget(this);
+    QHBoxLayout *lineLayout = new QHBoxLayout(lineWidget);
+    QLabel *lineLabel = new QLabel(tr("Width"), this);
     mLineWidthSpin = new QrealAnimatorValueSlider(0, 1000, 0.5, this);
-    //mLineWidthSpin->setValueSliderVisible(false);
-    //mLineWidthSpin->setRange(0.0, 1000.0);
-    //mLineWidthSpin->setSuffix(" px");
-    //mLineWidthSpin->setSingleStep(0.1);
+    mLineWidthSpin->setMinimumHeight(25);
+    mLineWidthSpin->setMinimumWidth(100);
+    lineLayout->addWidget(lineLabel);
+    lineLayout->addStretch();
+    lineLayout->addWidget(mLineWidthSpin);
 
-    mBrushLabel = new BrushLabel(BrushSelectionWidget::sOutlineContext.get());
-    mBrushLabel->setToolTip(gSingleLineTooltip("Current Brush"));
-    connect(mBrushLabel, &BrushLabel::triggered,
-            this, [this]() { setCurrentIndex(1); });
-
-    mLineWidthLayout->addWidget(mBrushLabel, 0, Qt::AlignTop);
-    mLineWidthLayout->addWidget(mLineWidthLabel, 0,
-                                Qt::AlignRight | Qt::AlignBottom);
-    mLineWidthLayout->addWidget(mLineWidthSpin, 0,
-                                Qt::AlignRight | Qt::AlignBottom);
-
-    mStrokeSettingsLayout->addLayout(mLineWidthLayout);
+    mStrokeSettingsLayout->addWidget(lineWidget);
 
     mJoinStyleLayout->setSpacing(0);
     mBevelJoinStyleButton = new QPushButton(QIcon(iconsDir + "/joinBevel.png"), "", this);
@@ -223,7 +215,7 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
     mGradientTypeWidget->setContentsMargins(0, 0, 0, 0);
     mGradientTypeWidget->setLayout(mGradientTypeLayout);
 
-    const auto brushCurvesWidget = new QWidget(this);
+    /*const auto brushCurvesWidget = new QWidget(this);
     mBrushWidthCurveEditor = new Segment1DEditor(0, 1, this);
     mBrushPressureCurveEditor = new Segment1DEditor(0, 1, this);
     mBrushSpacingCurveEditor = new Segment1DEditor(0, 50, this);
@@ -240,9 +232,9 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
                 new NamedContainer("time", mBrushTimeCurveEditor, true, this));
     const auto brushCurvesScroll = new ScrollArea(this);
     brushCurvesScroll->setWidget(brushCurvesWidget);
-    mBrushSettingsWidget = brushCurvesScroll;
+    mBrushSettingsWidget = brushCurvesScroll;*/
 
-    const auto oCtxt = BrushSelectionWidget::sOutlineContext;
+    /*const auto oCtxt = BrushSelectionWidget::sOutlineContext;
     mBrushSelectionWidget = new BrushSelectionWidget(*oCtxt.get(), this);
 
     connect(mBrushSelectionWidget,
@@ -327,7 +319,7 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
     connect(mBrushSpacingCurveEditor, &Segment1DEditor::editingCanceled,
             this, [this]() {
         applyBrushSpacingAction(SegAction::sMakeCancel());
-    });
+    });*/
 
     mMainLayout->addLayout(mTargetLayout);
     mMainLayout->addLayout(mColorTypeLayout);
@@ -342,11 +334,11 @@ FillStrokeSettingsWidget::FillStrokeSettingsWidget(Document &document,
     const auto fillAndStrokeArea = new ScrollArea(this);
     fillAndStrokeArea->setWidget(mFillAndStrokeWidget);
     addTab(fillAndStrokeArea, "Fill and Stroke");
-    addTab(mBrushSelectionWidget, "Stroke Brush");
-    addTab(mBrushSettingsWidget, "Stroke Curves");
+    //addTab(mBrushSelectionWidget, "Stroke Brush");
+    //addTab(mBrushSettingsWidget, "Stroke Curves");
 
     mGradientTypeWidget->hide();
-    mBrushLabel->hide();
+    //mBrushLabel->hide();
 
     setFillTarget();
     setCapStyle(SkPaint::kRound_Cap);
@@ -366,7 +358,7 @@ void FillStrokeSettingsWidget::setRadialGradientAction() {
 void FillStrokeSettingsWidget::setGradientFillAction() {
     if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->show();
     mFillGradientButton->setChecked(true);
-    mFillBrushButton->setChecked(false);
+    //mFillBrushButton->setChecked(false);
     mFillFlatButton->setChecked(false);
     mFillNoneButton->setChecked(false);
     paintTypeSet(GRADIENTPAINT);
@@ -374,18 +366,18 @@ void FillStrokeSettingsWidget::setGradientFillAction() {
 }
 
 void FillStrokeSettingsWidget::setBrushFillAction() {
-    if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->hide();
+    /*if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->hide();
     mFillBrushButton->setChecked(true);
     mFillGradientButton->setChecked(false);
     mFillFlatButton->setChecked(false);
     mFillNoneButton->setChecked(false);
-    paintTypeSet(BRUSHPAINT);
+    paintTypeSet(BRUSHPAINT);*/
 }
 
 void FillStrokeSettingsWidget::setFlatFillAction() {
     if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->show();
     mFillGradientButton->setChecked(false);
-    mFillBrushButton->setChecked(false);
+    //mFillBrushButton->setChecked(false);
     mFillFlatButton->setChecked(true);
     mFillNoneButton->setChecked(false);
     paintTypeSet(FLATPAINT);
@@ -395,7 +387,7 @@ void FillStrokeSettingsWidget::setFlatFillAction() {
 void FillStrokeSettingsWidget::setNoneFillAction() {
     if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->show();
     mFillGradientButton->setChecked(false);
-    mFillBrushButton->setChecked(false);
+    //mFillBrushButton->setChecked(false);
     mFillFlatButton->setChecked(false);
     mFillNoneButton->setChecked(true);
     paintTypeSet(NOPAINT);
@@ -421,29 +413,29 @@ void FillStrokeSettingsWidget::updateAfterTargetChanged() {
     setCurrentPaintType(getCurrentPaintTypeVal());
     if(getCurrentPaintTypeVal() == NOPAINT) {
         mFillGradientButton->setChecked(false);
-        mFillBrushButton->setChecked(false);
+        //mFillBrushButton->setChecked(false);
         mFillFlatButton->setChecked(false);
         mFillNoneButton->setChecked(true);
     } else if(getCurrentPaintTypeVal() == FLATPAINT) {
         mFillGradientButton->setChecked(false);
-        mFillBrushButton->setChecked(false);
+        //mFillBrushButton->setChecked(false);
         mFillFlatButton->setChecked(true);
         mFillNoneButton->setChecked(false);
     } else if(getCurrentPaintTypeVal() == GRADIENTPAINT) {
         mFillGradientButton->setChecked(true);
-        mFillBrushButton->setChecked(false);
+        //mFillBrushButton->setChecked(false);
         mFillFlatButton->setChecked(false);
         mFillNoneButton->setChecked(false);
         mGradientWidget->setCurrentGradient(getCurrentGradientVal());
         const auto gradType = getCurrentGradientTypeVal();
         mLinearGradientButton->setChecked(gradType == GradientType::LINEAR);
         mRadialGradientButton->setChecked(gradType == GradientType::RADIAL);
-    } else if(getCurrentPaintTypeVal() == BRUSHPAINT) {
+    } /*else if(getCurrentPaintTypeVal() == BRUSHPAINT) {
         mFillGradientButton->setChecked(false);
         mFillFlatButton->setChecked(false);
         mFillBrushButton->setChecked(true);
         mFillNoneButton->setChecked(false);
-    }
+    }*/
 }
 
 void FillStrokeSettingsWidget::setCurrentPaintType(
@@ -454,54 +446,67 @@ void FillStrokeSettingsWidget::setCurrentPaintType(
     else setGradientPaintType();
 }
 
-void FillStrokeSettingsWidget::setStrokeBrush(
-        BrushContexedWrapper * const brush) {
-    const auto simpleBrush = brush->getSimpleBrush();
+void FillStrokeSettingsWidget::setStrokeBrush(BrushContexedWrapper * const brush)
+{
+    Q_UNUSED(brush)
+    qWarning() << "setStrokeBrush";
+    /*const auto simpleBrush = brush->getSimpleBrush();
     mDocument.fOutlineBrush = simpleBrush;
     setDisplayedBrush(simpleBrush);
     emitStrokeBrushChanged(simpleBrush);
-    mDocument.actionFinished();
+    mDocument.actionFinished();*/
 }
 
-void FillStrokeSettingsWidget::applyBrushSpacingAction(
-        const SegAction& action) {
-    const auto scene = *mDocument.fActiveScene;
+void FillStrokeSettingsWidget::applyBrushSpacingAction(const SegAction& action)
+{
+    Q_UNUSED(action)
+    qWarning() << "applyBrushSpacingAction";
+    /*const auto scene = *mDocument.fActiveScene;
     if(scene) scene->applyStrokeBrushSpacingActionToSelected(action);
-    mDocument.actionFinished();
+    mDocument.actionFinished();*/
 }
 
-void FillStrokeSettingsWidget::applyBrushPressureAction(
-        const SegAction& action) {
-    const auto scene = *mDocument.fActiveScene;
+void FillStrokeSettingsWidget::applyBrushPressureAction(const SegAction& action)
+{
+    Q_UNUSED(action)
+    qWarning() << "applyBrushPressureAction";
+    /*const auto scene = *mDocument.fActiveScene;
     if(scene) scene->applyStrokeBrushPressureActionToSelected(action);
-    mDocument.actionFinished();
+    mDocument.actionFinished();*/
 }
 
-void FillStrokeSettingsWidget::applyBrushWidthAction(
-        const SegAction& action) {
+void FillStrokeSettingsWidget::applyBrushWidthAction(const SegAction& action)
+{
+    Q_UNUSED(action)
+    qWarning() << "applyBrushWidthAction";
     const auto scene = *mDocument.fActiveScene;
     if(scene) scene->applyStrokeBrushWidthActionToSelected(action);
     mDocument.actionFinished();
 }
 
-void FillStrokeSettingsWidget::applyBrushTimeAction(
-        const SegAction& action) {
-    const auto scene = *mDocument.fActiveScene;
+void FillStrokeSettingsWidget::applyBrushTimeAction(const SegAction& action)
+{
+    Q_UNUSED(action)
+    qWarning() << "applyBrushTimeAction";
+    /*const auto scene = *mDocument.fActiveScene;
     if(scene) scene->applyStrokeBrushTimeActionToSelected(action);
-    mDocument.actionFinished();
+    mDocument.actionFinished();*/
 }
 
-void FillStrokeSettingsWidget::setDisplayedBrush(
-        SimpleBrushWrapper* const brush) {
-    const auto ctxt = BrushSelectionWidget::sOutlineContext.get();
+void FillStrokeSettingsWidget::setDisplayedBrush(SimpleBrushWrapper* const brush)
+{
+    Q_UNUSED(brush)
+    qWarning() << "setDisplayedBrush";
+    /*const auto ctxt = BrushSelectionWidget::sOutlineContext.get();
     const auto bw = ctxt->brushWrapper(brush);
     mBrushLabel->setBrush(bw);
-    mBrushSelectionWidget->setCurrentBrush(brush);
+    mBrushSelectionWidget->setCurrentBrush(brush);*/
 }
 
 void FillStrokeSettingsWidget::setCurrentBrushSettings(
         BrushSettingsAnimator * const brushSettings) {
-    if(brushSettings) {
+    Q_UNUSED(brushSettings)
+    /*if(brushSettings) {
         setDisplayedBrush(brushSettings->getBrush());
         mBrushWidthCurveEditor->setCurrentAnimator(
                     brushSettings->getWidthAnimator());
@@ -516,18 +521,18 @@ void FillStrokeSettingsWidget::setCurrentBrushSettings(
         mBrushPressureCurveEditor->setCurrentAnimator(nullptr);
         mBrushSpacingCurveEditor->setCurrentAnimator(nullptr);
         mBrushTimeCurveEditor->setCurrentAnimator(nullptr);
-    }
+    }*/
 }
 
 void FillStrokeSettingsWidget::setCurrentBox(BoundingBox* const box) {
     const auto fillSettings = box ? box->getFillSettings() : nullptr;
     const auto strokeSettings = box ? box->getStrokeSettings() : nullptr;
     setCurrentSettings(fillSettings, strokeSettings);
-    auto& conn = mCurrentBox.assign(box);
+    /*auto& conn = mCurrentBox.assign(box);
     if(box) {
         conn << connect(box, &BoundingBox::brushChanged,
                         this, &FillStrokeSettingsWidget::setDisplayedBrush);
-    }
+    }*/
 }
 
 void FillStrokeSettingsWidget::updateCurrentSettings() {
@@ -558,9 +563,9 @@ void FillStrokeSettingsWidget::paintTypeSet(const PaintType type) {
         setNoPaintType();
     } else if(type == FLATPAINT) {
         setFlatPaintType();
-    } else if(type == BRUSHPAINT) {
+    } /*else if(type == BRUSHPAINT) {
         setBrushPaintType();
-    } else if(type == GRADIENTPAINT) {
+    }*/ else if(type == GRADIENTPAINT) {
         if(mTarget == PaintSetting::FILL ? !mCurrentFillGradient :
                 !mCurrentStrokeGradient) {
             mGradientWidget->setCurrentGradient(nullptr);
@@ -802,7 +807,7 @@ void FillStrokeSettingsWidget::setRoundCapStyleAction() {
 
 void FillStrokeSettingsWidget::setFillTarget() {
     mTarget = PaintSetting::FILL;
-    mFillBrushButton->hide();
+    //mFillBrushButton->hide();
     mFillTargetButton->setChecked(true);
     mStrokeTargetButton->setChecked(false);
     mStrokeSettingsWidget->hide();
@@ -812,7 +817,7 @@ void FillStrokeSettingsWidget::setFillTarget() {
 
 void FillStrokeSettingsWidget::setStrokeTarget() {
     mTarget = PaintSetting::OUTLINE;
-    mFillBrushButton->show();
+    //mFillBrushButton->show();
     mStrokeTargetButton->setChecked(true);
     mFillTargetButton->setChecked(false);
     mStrokeSettingsWidget->show();
@@ -821,7 +826,7 @@ void FillStrokeSettingsWidget::setStrokeTarget() {
 }
 
 void FillStrokeSettingsWidget::setBrushPaintType() {
-    disconnectGradient();
+    /*disconnectGradient();
     mBrushLabel->show();
     mColorsSettingsWidget->show();
     mGradientWidget->hide();
@@ -829,12 +834,12 @@ void FillStrokeSettingsWidget::setBrushPaintType() {
     tabBar()->show();
     if(mTarget == PaintSetting::OUTLINE) mStrokeJoinCapWidget->hide();
     setCurrentPaintTypeVal(BRUSHPAINT);
-    updateColorAnimator();
+    updateColorAnimator();*/
 }
 
 void FillStrokeSettingsWidget::setNoPaintType() {
     setCurrentPaintTypeVal(NOPAINT);
-    mBrushLabel->hide();
+    //mBrushLabel->hide();
     mColorsSettingsWidget->hide();
     mGradientWidget->hide();
     mGradientTypeWidget->hide();
@@ -845,7 +850,7 @@ void FillStrokeSettingsWidget::setNoPaintType() {
 
 void FillStrokeSettingsWidget::setFlatPaintType() {
     disconnectGradient();
-    mBrushLabel->hide();
+    //mBrushLabel->hide();
     mColorsSettingsWidget->show();
     mGradientWidget->hide();
     mGradientTypeWidget->hide();
@@ -858,7 +863,7 @@ void FillStrokeSettingsWidget::setFlatPaintType() {
 
 void FillStrokeSettingsWidget::setGradientPaintType() {
     connectGradient();
-    mBrushLabel->hide();
+    //mBrushLabel->hide();
     if(mTarget == PaintSetting::FILL) {
         mCurrentFillPaintType = GRADIENTPAINT;
     } else {
diff --git a/src/app/GUI/fillstrokesettings.h b/src/app/GUI/fillstrokesettings.h
index e02fafc9..99c9ce23 100755
--- a/src/app/GUI/fillstrokesettings.h
+++ b/src/app/GUI/fillstrokesettings.h
@@ -173,7 +173,7 @@ private:
     QPushButton *mFillNoneButton = nullptr;
     QPushButton *mFillFlatButton = nullptr;
     QPushButton *mFillGradientButton = nullptr;
-    QPushButton *mFillBrushButton = nullptr;
+    //QPushButton *mFillBrushButton = nullptr;
 
     QWidget *mStrokeSettingsWidget;
     QWidget* mStrokeJoinCapWidget;
@@ -189,8 +189,8 @@ private:
     QPushButton *mSquareCapStyleButton;
     QPushButton *mRoundCapStyleButton;
 
-    QHBoxLayout *mLineWidthLayout = new QHBoxLayout();
-    QLabel *mLineWidthLabel = new QLabel("Width:");
+    //QHBoxLayout *mLineWidthLayout = new QHBoxLayout();
+    //QLabel *mLineWidthLabel = new QLabel("Width:");
     QrealAnimatorValueSlider *mLineWidthSpin;
 
     ColorSettingsWidget *mColorsSettingsWidget;
@@ -204,14 +204,14 @@ private:
 
     QWidget *mFillAndStrokeWidget;
 
-    BrushLabel* mBrushLabel;
-    BrushSelectionWidget* mBrushSelectionWidget;
+    //BrushLabel* mBrushLabel;
+    //BrushSelectionWidget* mBrushSelectionWidget;
 
-    QWidget* mBrushSettingsWidget;
+    /*QWidget* mBrushSettingsWidget;
     Segment1DEditor* mBrushWidthCurveEditor;
     Segment1DEditor* mBrushPressureCurveEditor;
     Segment1DEditor* mBrushSpacingCurveEditor;
-    Segment1DEditor* mBrushTimeCurveEditor;
+    Segment1DEditor* mBrushTimeCurveEditor;*/
 
     ConnContextQPtr<BoundingBox> mCurrentBox;
 };
diff --git a/src/app/GUI/mainwindow.cpp b/src/app/GUI/mainwindow.cpp
index da4c8fe4..c3a977c0 100755
--- a/src/app/GUI/mainwindow.cpp
+++ b/src/app/GUI/mainwindow.cpp
@@ -67,7 +67,7 @@
 #include "ShaderEffects/shadereffectprogram.h"
 #include "importhandler.h"
 #include "switchbutton.h"
-#include "centralwidget.h"
+//#include "centralwidget.h"
 #include "ColorWidgets/bookmarkedcolors.h"
 #include "GUI/edialogs.h"
 #include "GUI/dialogsinterface.h"
@@ -100,7 +100,7 @@ MainWindow::MainWindow(Document& document,
                        QWidget * const parent)
     : QMainWindow(parent)
     , mWelcomeDialog(nullptr)
-    , mCentralWidget(nullptr)
+    //, mCentralWidget(nullptr)
     , mStackWidget(nullptr)
     //, mFillStrokeSettingsDockBar(nullptr)
     //, mTimelineDockBar(nullptr)
@@ -118,7 +118,7 @@ MainWindow::MainWindow(Document& document,
     ImportHandler::sInstance->addImporter<eXevImporter>();
     ImportHandler::sInstance->addImporter<evImporter>();
     ImportHandler::sInstance->addImporter<eSvgImporter>();
-    ImportHandler::sInstance->addImporter<eOraImporter>();
+    //ImportHandler::sInstance->addImporter<eOraImporter>();
 
     connect(&mDocument, &Document::evFilePathChanged,
             this, &MainWindow::updateTitle);
@@ -217,9 +217,9 @@ MainWindow::MainWindow(Document& document,
     });*/
 
     const auto pCtxt = BrushSelectionWidget::sPaintContext;
-    mBrushSelectionWidget = new BrushSelectionWidget(*pCtxt.get(), this);
-    connect(mBrushSelectionWidget, &BrushSelectionWidget::currentBrushChanged,
-            &mDocument, &Document::setBrush);
+    //mBrushSelectionWidget = new BrushSelectionWidget(*pCtxt.get(), this);
+    //connect(mBrushSelectionWidget, &BrushSelectionWidget::currentBrushChanged,
+      //      &mDocument, &Document::setBrush);
 //    connect(mBrushSettingsWidget,
 //            SIGNAL(brushReplaced(const Brush*,const Brush*)),
 //            mCanvasWindow,
@@ -262,19 +262,19 @@ MainWindow::MainWindow(Document& document,
     const auto fsl = new FileSourceList(this);
     connect(fsl, &FileSourceList::doubleClicked,
             this, &MainWindow::importFile);
-    {
+    /*{
         const auto brush = BrushCollectionData::sGetBrush("Deevad", "2B_pencil");
         const auto paintCtxt = BrushSelectionWidget::sPaintContext;
         const auto paintBrush = paintCtxt->brushWrapper(brush);
         mDocument.setBrush(paintBrush);
         mDocument.fOutlineBrush = brush;
-    }
-    const auto bBrush = new BookmarkedBrushes(true, 64, pCtxt.get(), this);
+    }*/
+    //const auto bBrush = new BookmarkedBrushes(true, 64, pCtxt.get(), this);
     const auto bColor = new BookmarkedColors(true, 64, this);
 
-    mCentralWidget = new CentralWidget(bBrush,
-                                       mLayoutHandler->sceneLayout(),
-                                       bColor);
+    //mCentralWidget = new CentralWidget(bBrush,
+      //                                 mLayoutHandler->sceneLayout(),
+        //                               bColor);
 
     QToolBar *viewerToolBar = new QToolBar(this);
     viewerToolBar->setOrientation(Qt::Vertical);
@@ -301,7 +301,7 @@ MainWindow::MainWindow(Document& document,
        this);
 
     mStackWidget = new QStackedWidget(this);
-    mStackWidget->addWidget(mCentralWidget);
+    mStackWidget->addWidget(mLayoutHandler->sceneLayout());
     mStackWidget->addWidget(mWelcomeDialog);
 
     //
@@ -771,7 +771,7 @@ void MainWindow::setupMenuBar()
     mNoneQuality = filteringMenu->addAction(
                 tr("None", "MenuBar_View_Filtering"), [this]() {
         eFilterSettings::sSetDisplayFilter(kNone_SkFilterQuality);
-        centralWidget()->update();
+        mStackWidget->currentWidget()->update();
 
         mLowQuality->setChecked(false);
         mMediumQuality->setChecked(false);
@@ -1386,7 +1386,7 @@ MainWindow *MainWindow::sGetInstance()
 void MainWindow::updateCanvasModeButtonsChecked()
 {
     const CanvasMode mode = mDocument.fCanvasMode;
-    mCentralWidget->setCanvasMode(mode);
+    //mCentralWidget->setCanvasMode(mode);
 
     //const bool boxMode = mode == CanvasMode::boxTransform;
     //mFontWidgetAct->setVisible(boxMode);
@@ -1438,7 +1438,7 @@ void MainWindow::setFileChangedSinceSaving(const bool changed)
 
 SimpleBrushWrapper *MainWindow::getCurrentBrush() const
 {
-    return mBrushSelectionWidget->getCurrentBrush();
+    return nullptr; //mBrushSelectionWidget->getCurrentBrush();
 }
 
 void MainWindow::setCurrentBox(BoundingBox *box)
@@ -1807,7 +1807,6 @@ void MainWindow::importFile()
     const QString fileTypes = "(*.ev *.xev *.svg " +
             FileExtensions::videoFilters() +
             FileExtensions::imageFilters() +
-            FileExtensions::layersFilters() +
             FileExtensions::soundFilters() + ")";
     const auto importPaths = eDialogs::openFiles(
                 title, defPath, fileType.arg(fileTypes));
diff --git a/src/app/GUI/mainwindow.h b/src/app/GUI/mainwindow.h
index a20f7361..3275854b 100755
--- a/src/app/GUI/mainwindow.h
+++ b/src/app/GUI/mainwindow.h
@@ -56,7 +56,7 @@ class AnimationDockWidget;
 class ColorSettingsWidget;
 class FillStrokeSettingsWidget;
 class TimelineDockWidget;
-class BrushSelectionWidget;
+//class BrushSelectionWidget;
 class CanvasWindow;
 class MemoryHandler;
 
@@ -181,7 +181,7 @@ protected:
 
 private:
     QWidget *mWelcomeDialog;
-    CentralWidget *mCentralWidget;
+    //CentralWidget *mCentralWidget;
     QStackedWidget *mStackWidget;
 
     void openWelcomeDialog();
@@ -233,7 +233,7 @@ private:
     QWidget *mAlignDockBar;*/
 
     TimelineDockWidget *mTimeline = nullptr;
-    BrushSelectionWidget *mBrushSelectionWidget = nullptr;
+    //BrushSelectionWidget *mBrushSelectionWidget = nullptr;
 
     //QStatusBar* mStatusBar;
     //UsageWidget* mUsageWidget = nullptr;
diff --git a/src/app/eimporters.cpp b/src/app/eimporters.cpp
index 07c4afc9..d30cc690 100755
--- a/src/app/eimporters.cpp
+++ b/src/app/eimporters.cpp
@@ -19,7 +19,7 @@
 #include "GUI/mainwindow.h"
 #include "eimporters.h"
 #include "svgimporter.h"
-#include "Ora/oraimporter.h"
+//#include "Ora/oraimporter.h"
 
 qsptr<BoundingBox> eXevImporter::import(const QFileInfo &fileInfo, Canvas * const scene) const {
     Q_UNUSED(scene);
@@ -41,10 +41,10 @@ qsptr<BoundingBox> eSvgImporter::import(const QFileInfo &fileInfo, Canvas * cons
                                   gradientCreator);
 }
 
-qsptr<BoundingBox> eOraImporter::import(const QFileInfo &fileInfo, Canvas * const scene) const {
+/*qsptr<BoundingBox> eOraImporter::import(const QFileInfo &fileInfo, Canvas * const scene) const {
     const auto gradientCreator = [scene]() {
         return scene->createNewGradient();
     };
     return ImportORA::loadORAFile(fileInfo.absoluteFilePath(),
                                   gradientCreator);
-}
+}*/
diff --git a/src/app/eimporters.h b/src/app/eimporters.h
index a65541c6..7ecc5775 100755
--- a/src/app/eimporters.h
+++ b/src/app/eimporters.h
@@ -50,7 +50,7 @@ public:
                               Canvas* const scene) const;
 };
 
-class eOraImporter : public eImporter {
+/*class eOraImporter : public eImporter {
 public:
     bool supports(const QFileInfo& fileInfo) const {
         return fileInfo.suffix() == "ora";
@@ -58,6 +58,6 @@ public:
 
     qsptr<BoundingBox> import(const QFileInfo& fileInfo,
                               Canvas* const scene) const;
-};
+};*/
 
 #endif // EIMPORTER_H
diff --git a/src/core/Boxes/animationbox.cpp b/src/core/Boxes/animationbox.cpp
index a5ccfc41..41014eef 100755
--- a/src/core/Boxes/animationbox.cpp
+++ b/src/core/Boxes/animationbox.cpp
@@ -257,7 +257,7 @@ void AnimationBox::setupCanvasMenu(PropertyMenu * const menu) {
 void AnimationBox::createPaintObject(const int firstAbsFrame,
                                      const int lastAbsFrame,
                                      const int increment) {
-    const qptr<ContainerBox> parent = getParentGroup();
+    /*const qptr<ContainerBox> parent = getParentGroup();
     if(!parent) return;
     const auto paintObj = enve::make_shared<PaintBox>();
     copyBoundingBoxDataTo(paintObj.get());
@@ -289,7 +289,7 @@ void AnimationBox::createPaintObject(const int firstAbsFrame,
     } else {
         connect(task, &ComplexTask::finishedAll, paintObj.get(), adder);
         TaskScheduler::instance()->addComplexTask(taskSPtr);
-    }
+    }*/
 }
 
 void AnimationBox::setupRenderData(const qreal relFrame,
diff --git a/src/core/Boxes/imagebox.cpp b/src/core/Boxes/imagebox.cpp
index a5676a8a..37043367 100755
--- a/src/core/Boxes/imagebox.cpp
+++ b/src/core/Boxes/imagebox.cpp
@@ -115,7 +115,7 @@ void ImageBox::setupCanvasMenu(PropertyMenu * const menu) {
 
     menu->addSeparator();
 
-    const PropertyMenu::PlainSelectedOp<ImageBox> createPaintObj =
+    /*const PropertyMenu::PlainSelectedOp<ImageBox> createPaintObj =
     [](ImageBox * box) {
         const qptr<ImageBox> boxPtr = box;
         const auto loader = [boxPtr]() {
@@ -136,7 +136,7 @@ void ImageBox::setupCanvasMenu(PropertyMenu * const menu) {
             if(task) task->addDependent({loader, nullptr});
         }
     };
-    menu->addPlainAction("Create Paint Object", createPaintObj);
+    menu->addPlainAction("Create Paint Object", createPaintObj);*/
 
     BoundingBox::setupCanvasMenu(menu);
 }
diff --git a/src/core/Boxes/paintbox.cpp b/src/core/Boxes/paintbox.cpp
index f481f54d..cd859ae4 100755
--- a/src/core/Boxes/paintbox.cpp
+++ b/src/core/Boxes/paintbox.cpp
@@ -20,8 +20,8 @@
 #include "Animators/transformanimator.h"
 #include "Private/esettings.h"
 #include "Private/document.h"
-#include "Ora/oracreator.h"
-#include "Ora/oraparser.h"
+//#include "Ora/oracreator.h"
+//#include "Ora/oraparser.h"
 #include "svgexporter.h"
 
 #include "GUI/edialogs.h"
@@ -30,8 +30,8 @@
 
 PaintBox::PaintBox() : BoundingBox("Paint Box", eBoxType::paint)
 {
-    mSurface = enve::make_shared<AnimatedSurface>();
-    ca_addChild(mSurface);
+    //mSurface = enve::make_shared<AnimatedSurface>();
+    //ca_addChild(mSurface);
 }
 
 struct PaintBoxRenderData : public ImageRenderData
@@ -44,14 +44,14 @@ public:
 
     void loadImageFromHandler()
     {
-        if (fImage) { return; }
-        if (fASurface) { fASurface->getFrameImage(qFloor(fRelFrame), fImage); }
+        //if (fImage) { return; }
+        //if (fASurface) { fASurface->getFrameImage(qFloor(fRelFrame), fImage); }
     }
 
     void updateRelBoundingRect() final
     {
-        Q_ASSERT(fSurface);
-        fRelBoundingRect = fSurface->surface().pixelBoundingRect();
+        //Q_ASSERT(fSurface);
+        //fRelBoundingRect = fSurface->surface().pixelBoundingRect();
     }
 
     qptr<AnimatedSurface> fASurface;
@@ -62,33 +62,34 @@ void PaintBox::setupRenderData(const qreal relFrame, const QMatrix& parentM,
                                BoxRenderData * const data,
                                Canvas* const scene)
 {
-    BoundingBox::setupRenderData(relFrame, parentM, data, scene);
+    /*BoundingBox::setupRenderData(relFrame, parentM, data, scene);
     const auto paintData = static_cast<PaintBoxRenderData*>(data);
     const int imgFrame = qFloor(relFrame);
     const auto imgTask = mSurface->getFrameImage(imgFrame, paintData->fImage);
     if (imgTask) { imgTask->addDependent(data); }
 
     paintData->fASurface = mSurface.get();
-    paintData->fSurface = enve::shared(mSurface->getSurface(imgFrame));
+    paintData->fSurface = enve::shared(mSurface->getSurface(imgFrame));*/
 }
 
 stdsptr<BoxRenderData> PaintBox::createRenderData()
 {
-    return enve::make_shared<PaintBoxRenderData>(this);
+    //return enve::make_shared<PaintBoxRenderData>(this);
+    return nullptr;
 }
 
 void PaintBox::setupCanvasMenu(PropertyMenu * const menu)
 {
-    if (menu->hasActionsForType<PaintBox>()) { return; }
+    /*if (menu->hasActionsForType<PaintBox>()) { return; }
     menu->addedActionsForType<PaintBox>();
 
-    BoundingBox::setupCanvasMenu(menu);
+    BoundingBox::setupCanvasMenu(menu);*/
 }
 
 void PaintBox::saveSVG(SvgExporter& exp, DomEleTask* const task) const
 {
-    auto& ele = task->initialize("use");
+    /*auto& ele = task->initialize("use");
     const auto visRelRange = prp_absRangeToRelRange(task->visRange());
     const auto pTask = mSurface->savePaintSVG(exp, ele, visRelRange);
-    if (pTask) { pTask->addDependent(task); }
+    if (pTask) { pTask->addDependent(task); }*/
 }
diff --git a/src/core/Boxes/paintbox.h b/src/core/Boxes/paintbox.h
index 2e1e83b5..ec71d440 100755
--- a/src/core/Boxes/paintbox.h
+++ b/src/core/Boxes/paintbox.h
@@ -17,7 +17,7 @@
 #ifndef PAINTBOX_H
 #define PAINTBOX_H
 #include "boundingbox.h"
-#include "Paint/animatedsurface.h"
+//#include "Paint/animatedsurface.h"
 #include "imagebox.h"
 class QPointFAnimator;
 class AnimatedPoint;
@@ -42,11 +42,11 @@ public:
 
     void saveSVG(SvgExporter& exp, DomEleTask* const task) const;
 
-    AnimatedSurface * getSurface() const
-    { return mSurface.get(); }
+    //AnimatedSurface * getSurface() const
+    //{ return mSurface.get(); }
 
-private:
-    qsptr<AnimatedSurface> mSurface;
+//private:
+    //qsptr<AnimatedSurface> mSurface;
 };
 
 #endif // PAINTBOX_H
diff --git a/src/core/Boxes/pathbox.h b/src/core/Boxes/pathbox.h
index 0fb3a215..8f596b41 100755
--- a/src/core/Boxes/pathbox.h
+++ b/src/core/Boxes/pathbox.h
@@ -21,9 +21,9 @@
 #include <QLabel>
 #include "Boxes/boxwithpatheffects.h"
 #include "Animators/paintsettingsanimator.h"
-#include "Paint/autotiledsurface.h"
+//#include "Paint/autotiledsurface.h"
 #include "pathboxrenderdata.h"
-#include "libmypaintincludes.h"
+//#include "libmypaintincludes.h"
 #include "Animators/qcubicsegment1danimator.h"
 class SmartVectorPath;
 class GradientPoints;
diff --git a/src/core/Boxes/pathboxrenderdata.cpp b/src/core/Boxes/pathboxrenderdata.cpp
index ba93a5b6..f369c23e 100755
--- a/src/core/Boxes/pathboxrenderdata.cpp
+++ b/src/core/Boxes/pathboxrenderdata.cpp
@@ -89,7 +89,7 @@ void PathBoxRenderData::drawSk(SkCanvas * const canvas) {
     }
     if(!fOutlinePath.isEmpty()) {
         paint.setShader(nullptr);
-        if(fStrokeSettings.fPaintType == PaintType::BRUSHPAINT) {
+        /*if(fStrokeSettings.fPaintType == PaintType::BRUSHPAINT) {
             if(!fStrokeSettings.fStrokeBrush) return;
             AutoTiledSurface surf;
             surf.setPixelClamp(fMaxBoundsRect.translated(-fGlobalRect.topLeft()));
@@ -112,8 +112,8 @@ void PathBoxRenderData::drawSk(SkCanvas * const canvas) {
         //                for(auto& set : fillBrushSet)
         //                    surf.execute(fillBrush, set);
 
-            const auto strokeBrush = fStrokeSettings.fStrokeBrush->getBrush();
-            auto strokeWidthCurve = fStrokeSettings.fWidthCurve*fResolution;
+            //const auto strokeBrush = fStrokeSettings.fStrokeBrush->getBrush();
+            //auto strokeWidthCurve = fStrokeSettings.fWidthCurve*fResolution;
             const auto strokeBrushSet = BrushStrokeSet::sOutlineStrokesForSkPath(
                         pathT,
                         fStrokeSettings.fTimeCurve,
@@ -140,9 +140,9 @@ void PathBoxRenderData::drawSk(SkCanvas * const canvas) {
                                     fGlobalRect.right() - baseRect.right(),
                                     fGlobalRect.bottom() - baseRect.bottom());
             mBitmap = surf.toBitmap(iMargins);
-        } else {
+        } else {*/
             fStrokeSettings.applyPainterSettingsSk(paint);
             canvas->drawPath(fOutlinePath, paint);
-        }
+        //}
     }
 }
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index 95a99042..cc012ee9 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -89,7 +89,7 @@ set(QUAZIP_LIBRARIES_DIRS "/usr/lib" CACHE STRING "quazip library path")
 set(QUAZIP_LIBRARIES "quazip5" CACHE STRING "quazip library")
 set(QUAZIP_INCLUDE_DIRS "/usr/include/quazip5" CACHE STRING "quazip includes path")
 
-pkg_search_module(MYPAINT REQUIRED libmypaint)
+#pkg_search_module(MYPAINT REQUIRED libmypaint)
 pkg_check_modules(AVFORMAT REQUIRED libavformat)
 pkg_check_modules(AVCODEC REQUIRED libavcodec)
 pkg_check_modules(AVUTIL REQUIRED libavutil)
@@ -99,7 +99,7 @@ pkg_check_modules(SWRESAMPLE REQUIRED libswresample)
 add_definitions(-DCORE_LIBRARY)
 
 include_directories(
-    ${MYPAINT_INCLUDE_DIRS}
+    #${MYPAINT_INCLUDE_DIRS}
     ${QUAZIP_INCLUDE_DIRS}
     ${AVFORMAT_INCLUDE_DIRS}
     ${CMAKE_CURRENT_SOURCE_DIR}/../skia
@@ -213,19 +213,19 @@ set(
     GUI/valueinput.cpp
     MovablePoints/gradientpoint.cpp
     MovablePoints/pathpivot.cpp
-    Ora/oracreator.cpp
-    Ora/oraimporter.cpp
-    Ora/oraparser.cpp
-    Paint/animatedsurface.cpp
-    Paint/autotiledsurface.cpp
+    #Ora/oracreator.cpp
+    #Ora/oraimporter.cpp
+    #Ora/oraparser.cpp
+    #Paint/animatedsurface.cpp
+    #Paint/autotiledsurface.cpp
     Paint/autotilesdata.cpp
     Paint/brushcontexedwrapper.cpp
     Paint/brushescontext.cpp
-    Paint/brushstroke.cpp
-    Paint/brushstrokeset.cpp
+    #Paint/brushstroke.cpp
+    #Paint/brushstrokeset.cpp
     Paint/colorconversions.cpp
-    Paint/drawableautotiledsurface.cpp
-    Paint/onionskin.cpp
+    #Paint/drawableautotiledsurface.cpp
+    #Paint/onionskin.cpp
     Paint/painttarget.cpp
     Paint/simplebrushwrapper.cpp
     Paint/tile.cpp
@@ -541,20 +541,20 @@ set(
     GUI/valueinput.h
     MovablePoints/gradientpoint.h
     MovablePoints/pathpivot.h
-    Ora/oracreator.h
-    Ora/oraimporter.h
-    Ora/oraparser.h
-    Ora/orastructure.h
-    Paint/animatedsurface.h
-    Paint/autotiledsurface.h
-    Paint/autotilesdata.h
+    #Ora/oracreator.h
+    #Ora/oraimporter.h
+    #Ora/oraparser.h
+    #Ora/orastructure.h
+    #Paint/animatedsurface.h
+    #Paint/autotiledsurface.h
+    #Paint/autotilesdata.h
     Paint/brushcontexedwrapper.h
     Paint/brushescontext.h
-    Paint/brushstroke.h
-    Paint/brushstrokeset.h
+    #Paint/brushstroke.h
+    #Paint/brushstrokeset.h
     Paint/colorconversions.h
-    Paint/drawableautotiledsurface.h
-    Paint/onionskin.h
+    #Paint/drawableautotiledsurface.h
+    #Paint/onionskin.h
     Paint/painttarget.h
     Paint/simplebrushwrapper.h
     Paint/tile.h
@@ -688,7 +688,7 @@ set(
     gpurendertools.h
     hardwareenums.h
     importhandler.h
-    libmypaintincludes.h
+    #libmypaintincludes.h
     matrixdecomposition.h
     memorydatahandler.h
     namefixer.h
@@ -831,7 +831,7 @@ target_link_libraries(
     Qt${QT_VERSION_MAJOR}::Qml
     Qt${QT_VERSION_MAJOR}::Xml
     Qt${QT_VERSION_MAJOR}::Svg
-    ${MYPAINT_LIBRARIES}
+    #${MYPAINT_LIBRARIES}
     ${QUAZIP_LIBRARIES}
     ${AVFORMAT_LIBRARIES}
     ${AVCODEC_LIBRARIES}
diff --git a/src/core/FileCacheHandlers/imagecachehandler.cpp b/src/core/FileCacheHandlers/imagecachehandler.cpp
index 98cde42b..4450201a 100755
--- a/src/core/FileCacheHandlers/imagecachehandler.cpp
+++ b/src/core/FileCacheHandlers/imagecachehandler.cpp
@@ -17,7 +17,7 @@
 #include "imagecachehandler.h"
 
 #include "filecachehandler.h"
-#include "Ora/oraimporter.h"
+//#include "Ora/oraimporter.h"
 
 #include "GUI/edialogs.h"
 #include "filesourcescache.h"
@@ -48,9 +48,9 @@ eTask *ImageFileDataHandler::scheduleLoad()
     }
     if (mImageLoader) { return mImageLoader.get(); }
     switch (mType) {
-    case Type::ora:
+    /*case Type::ora:
         mImageLoader = enve::make_shared<OraLoader>(mFilePath, this);
-        break;
+        break;*/
     case Type::image:
         mImageLoader = enve::make_shared<ImageLoader>(mFilePath, this);
         break;
@@ -102,15 +102,14 @@ void ImageLoader::afterCanceled()
     if (mTargetHandler) { mTargetHandler->replaceImage(mImage); }
 }
 
-void OraLoader::process()
+/*void OraLoader::process()
 {
     mImage = ImportORA::loadMergedORAFile(mFilePath, true);
-}
+}*/
 
 void ImageFileHandler::replace()
 {
-    const QString filters = FileExtensions::imageFilters() +
-                            FileExtensions::layersFilters();
+    const QString filters = FileExtensions::imageFilters();
     const auto importPath = eDialogs::openFile(
                 tr("Change Source"), path(),
                 "Image Files (" + filters + ")");
diff --git a/src/core/FileCacheHandlers/imagecachehandler.h b/src/core/FileCacheHandlers/imagecachehandler.h
index cb92172f..77694827 100755
--- a/src/core/FileCacheHandlers/imagecachehandler.h
+++ b/src/core/FileCacheHandlers/imagecachehandler.h
@@ -42,7 +42,7 @@ protected:
     sk_sp<SkImage> mImage;
 };
 
-class CORE_EXPORT OraLoader : public ImageLoader
+/*class CORE_EXPORT OraLoader : public ImageLoader
 {
     e_OBJECT
 
@@ -51,7 +51,7 @@ protected:
 
 public:
     void process();
-};
+};*/
 
 class CORE_EXPORT ImageFileDataHandler : public FileDataCacheHandler
 {
diff --git a/src/core/Paint/brushescontext.h b/src/core/Paint/brushescontext.h
index 73c9e201..b817a196 100755
--- a/src/core/Paint/brushescontext.h
+++ b/src/core/Paint/brushescontext.h
@@ -1,7 +1,7 @@
 #ifndef BRUSHESCONTEXT_H
 #define BRUSHESCONTEXT_H
 
-#include "libmypaintincludes.h"
+//#include "libmypaintincludes.h"
 #include "Paint/brushcontexedwrapper.h"
 
 struct CORE_EXPORT BrushCollectionData {
diff --git a/src/core/Paint/brushstroke.h b/src/core/Paint/brushstroke.h
index bca3e596..bc5efbfe 100755
--- a/src/core/Paint/brushstroke.h
+++ b/src/core/Paint/brushstroke.h
@@ -21,7 +21,7 @@
 
 #include "Segments/qcubicsegment1d.h"
 #include "Segments/qcubicsegment2d.h"
-#include "libmypaintincludes.h"
+//#include "libmypaintincludes.h"
 #include "pointhelpers.h"
 #include "pathoperations.h"
 
diff --git a/src/core/Paint/drawableautotiledsurface.h b/src/core/Paint/drawableautotiledsurface.h
index 92059ad7..38febf88 100755
--- a/src/core/Paint/drawableautotiledsurface.h
+++ b/src/core/Paint/drawableautotiledsurface.h
@@ -16,7 +16,7 @@
 
 #ifndef DRAWABLEAUTOTILEDSURFACE_H
 #define DRAWABLEAUTOTILEDSURFACE_H
-#include "autotiledsurface.h"
+//#include "autotiledsurface.h"
 #include "skia/skiahelpers.h"
 #include "CacheHandlers/hddcachablecont.h"
 #include "tilebitmaps.h"
@@ -58,8 +58,8 @@ public:
         drawOnCanvas(canvas, dst, nullptr, paint);
     }
 
-    UndoableAutoTiledSurface &surface()
-    { return mSurface; }
+    /*UndoableAutoTiledSurface &surface()
+    { return mSurface; }*/
 
     void pixelRectChanged(const QRect& pixRect);
 
@@ -99,7 +99,7 @@ public:
     { return QPoint(mZeroTileCol, mZeroTileRow); }
 
     QPoint zeroTilePos() const
-    { return zeroTile()*TILE_SIZE; }
+    { return zeroTile()*/*TILE_SIZE*/64; }
 private:
     void removeFirstColumn();
     void removeLastColumn();
@@ -138,7 +138,7 @@ private:
     QRect tileRectToPixRect(const QRect& tileRect) const;
     QRect pixRectToTileRect(const QRect& pixRect) const;
 
-    UndoableAutoTiledSurface mSurface;
+    //UndoableAutoTiledSurface mSurface;
     TileBitmaps mTileBitmaps;
     int &mRowCount;
     int &mColumnCount;
diff --git a/src/core/Paint/onionskin.h b/src/core/Paint/onionskin.h
index 2bf95b16..f720e890 100755
--- a/src/core/Paint/onionskin.h
+++ b/src/core/Paint/onionskin.h
@@ -16,7 +16,7 @@
 
 #ifndef ONIONSKIN_H
 #define ONIONSKIN_H
-#include "drawableautotiledsurface.h"
+//#include "drawableautotiledsurface.h"
 
 struct CORE_EXPORT OnionSkin {
     struct Skin {
diff --git a/src/core/Paint/painttarget.cpp b/src/core/Paint/painttarget.cpp
index df30338a..63d0829b 100755
--- a/src/core/Paint/painttarget.cpp
+++ b/src/core/Paint/painttarget.cpp
@@ -24,7 +24,8 @@ void PaintTarget::draw(SkCanvas * const canvas,
                        const QRect& drawRect,
                        const SkFilterQuality filter,
                        const bool drawOnion) {
-    if(!isValid()) return;
+
+    /*if(!isValid()) return;
     const auto canvasRect = viewTrans.inverted().mapRect(drawRect);
     const auto pDrawTrans = mPaintDrawableBox->getTotalTransform();
     const auto relDRect = pDrawTrans.inverted().mapRect(canvasRect);
@@ -44,12 +45,12 @@ void PaintTarget::draw(SkCanvas * const canvas,
         paint.setColor(SK_ColorWHITE);
         paint.setStrokeWidth(0.75f*invScale);
         canvas->drawRect(toSkRect(mCropRect), paint);
-    }
+    }*/
 }
 
-void PaintTarget::setPaintDrawable(DrawableAutoTiledSurface * const surf,
-                                   const int frame) {
-    if(mPaintDrawable) {
+//void PaintTarget::setPaintDrawable(DrawableAutoTiledSurface * const surf,
+  //                                 const int frame) {
+    /*if(mPaintDrawable) {
         if(mChanged) {
             mPaintDrawable->drawingDoneForNow();
             if(mPaintAnimSurface) {
@@ -68,11 +69,11 @@ void PaintTarget::setPaintDrawable(DrawableAutoTiledSurface * const surf,
         } else mPaintDrawable->scheduleLoadFromTmpFile();
     }
     mChanged = false;
-    setupOnionSkin();
-}
+    setupOnionSkin();*/
+//}
 
 void PaintTarget::setPaintBox(PaintBox * const box) {
-    if(box == mPaintDrawableBox) return;
+    /*if(box == mPaintDrawableBox) return;
     if(mPaintDrawableBox) {
         mPaintDrawableBox->setVisibleForScene(true);
     }
@@ -91,38 +92,38 @@ void PaintTarget::setPaintBox(PaintBox * const box) {
     } else {
         setPaintDrawable(nullptr);
         mPaintAnimSurface = nullptr;
-    }
+    }*/
 }
 
 QPointF PaintTarget::absPosToRelPos(const QPointF& absPos) const {
-    if(mPaintDrawable) {
+    /*if(mPaintDrawable) {
         const auto pDrawTrans = mPaintDrawableBox->getTotalTransform();
         return pDrawTrans.inverted().map(absPos);
-    }
+    }*/
     return absPos;
 }
 
 void PaintTarget::startTransform() {
-    if(mPaintAnimSurface) {
+    /*if(mPaintAnimSurface) {
         if(mPaintAnimSurface->anim_isRecording() &&
            !mPaintAnimSurface->anim_getKeyOnCurrentFrame())
             mPaintAnimSurface->anim_saveCurrentValueAsKey();
-    }
+    }*/
 }
 
 
 void PaintTarget::cropPress(const QPointF &pos) {
-    const auto relPos = absPosToRelPos(pos);
-    mCropRect = QRect(relPos.toPoint(), relPos.toPoint());
+    //const auto relPos = absPosToRelPos(pos);
+    //mCropRect = QRect(relPos.toPoint(), relPos.toPoint());
 }
 
 void PaintTarget::cropMove(const QPointF &pos) {
-    const auto relPos = absPosToRelPos(pos);
-    mCropRect.setBottomRight(relPos.toPoint());
+    //const auto relPos = absPosToRelPos(pos);
+    //mCropRect.setBottomRight(relPos.toPoint());
 }
 
 void PaintTarget::cropRelease(const QPointF &pos) {
-    cropMove(pos);
+    /*cropMove(pos);
     startTransform();
     mChanged = true;
 
@@ -133,24 +134,24 @@ void PaintTarget::cropRelease(const QPointF &pos) {
         mPaintDrawable->crop(mCropRect);
         addUndoRedo("Crop", roi);
     }
-    mCropRect = QRect();
+    mCropRect = QRect();*/
 }
 
 void PaintTarget::cropCancel() {
-    mCropRect = QRect();
+    //mCropRect = QRect();
 }
 
 void PaintTarget::movePress(const QPointF &pos) {
-    mMovePress = absPosToRelPos(pos);
+    //mMovePress = absPosToRelPos(pos);
 }
 
 void PaintTarget::moveMove(const QPointF &pos) {
-    startTransform();
-    mRelDrawPos = toSkPoint(absPosToRelPos(pos) - mMovePress);
+    //startTransform();
+    //mRelDrawPos = toSkPoint(absPosToRelPos(pos) - mMovePress);
 }
 
 void PaintTarget::moveRelease(const QPointF &pos) {
-    moveMove(pos);
+    /*moveMove(pos);
     const int dx = qRound(mRelDrawPos.x());
     const int dy = qRound(mRelDrawPos.y());
     mChanged = true;
@@ -177,20 +178,20 @@ void PaintTarget::moveRelease(const QPointF &pos) {
         }
         Document::sInstance->actionFinished();
     }
-    mRelDrawPos = {0, 0};
+    mRelDrawPos = {0, 0};*/
 }
 
 void PaintTarget::moveCancel() {
-    mRelDrawPos = {0, 0};
+    //mRelDrawPos = {0, 0};
 }
 
 void PaintTarget::paintPress(const QPointF& pos,
                              const ulong ts, const qreal pressure,
                              const qreal xTilt, const qreal yTilt,
                              const SimpleBrushWrapper * const brush) {
-    startTransform();
+    //startTransform();
 
-    if(mPaintDrawable && brush) {
+    /*if(mPaintDrawable && brush) {
         const auto& target = mPaintDrawable->surface();
         const auto pDrawTrans = mPaintDrawableBox->getTotalTransform();
         const auto drawPos = pDrawTrans.inverted().map(pos);
@@ -202,14 +203,14 @@ void PaintTarget::paintPress(const QPointF& pos,
         mPaintDrawable->pixelRectChanged(qRoi);
         mLastTs = ts;
         mChanged = true;
-    }
+    }*/
 }
 
 void PaintTarget::paintMove(const QPointF& pos,
                             const ulong ts, const qreal pressure,
                             const qreal xTilt, const qreal yTilt,
                             const SimpleBrushWrapper * const brush) {
-    if(mPaintDrawable && brush) {
+    /*if(mPaintDrawable && brush) {
         const auto& target = mPaintDrawable->surface();
         const double dt = (ts - mLastTs);
         const auto pDrawTrans = mPaintDrawableBox->getTotalTransform();
@@ -225,17 +226,17 @@ void PaintTarget::paintMove(const QPointF& pos,
         } else {
             mTotalRoi = mTotalRoi.united(qRoi);
         }
-    }
-    mLastTs = ts;
+    }*/
+    //mLastTs = ts;
 }
 
 void PaintTarget::addUndoRedo(const QString& name, const QRect& roi) {
-    if(mPaintAnimSurface && mPaintDrawable) {
+    /*if(mPaintAnimSurface && mPaintDrawable) {
         mPaintAnimSurface->addUndoRedo(name, roi);
         Document::sInstance->actionFinished();
-    }
+    }*/
 }
 
 void PaintTarget::paintRelease() {
-    addUndoRedo("Paint", mTotalRoi);
+    //addUndoRedo("Paint", mTotalRoi);
 }
diff --git a/src/core/Paint/painttarget.h b/src/core/Paint/painttarget.h
index df6f391d..2d4cde99 100755
--- a/src/core/Paint/painttarget.h
+++ b/src/core/Paint/painttarget.h
@@ -19,9 +19,9 @@
 class Canvas;
 #include "skia/skiaincludes.h"
 #include "simplebrushwrapper.h"
-#include "animatedsurface.h"
+//#include "animatedsurface.h"
 #include "Boxes/paintbox.h"
-#include "onionskin.h"
+//#include "onionskin.h"
 #include "CacheHandlers/usepointer.h"
 
 struct CORE_EXPORT PaintTarget {
@@ -47,32 +47,34 @@ struct CORE_EXPORT PaintTarget {
     void paintRelease();
 
     void newEmptyFrame() {
-        if(!isValid()) return;
-        mPaintAnimSurface->newEmptyFrame();
+        //if(!isValid()) return;
+        //mPaintAnimSurface->newEmptyFrame();
     }
 
     void setupOnionSkin() {
-        if(!isValid()) return;
+        /*if(!isValid()) return;
         qptr<Canvas> canvasP = mCanvas;
         stdsptr<bool> counter = std::make_shared<bool>(true);
         const auto missingLoaded = [canvasP, counter, this]() {
             if(!counter.unique() || !canvasP) return;
             setupOnionSkin();
         };
-        mPaintAnimSurface->setupOnionSkinFor(20, mPaintOnion, missingLoaded);
+        mPaintAnimSurface->setupOnionSkinFor(20, mPaintOnion, missingLoaded);*/
     }
 
-    void setPaintDrawable(DrawableAutoTiledSurface * const surf,
-                          const int frame = 0);
+    //void setPaintDrawable(DrawableAutoTiledSurface * const surf,
+      //                    const int frame = 0);
     void setPaintBox(PaintBox * const box);
 
     bool isValid() const {
-        return mPaintAnimSurface;
+        //return mPaintAnimSurface;
+        return false;
     }
 
     QRect pixelBoundingRect() const {
-        if(!isValid()) return QRect();
-        return mPaintDrawable->pixelBoundingRect();
+        //if(!isValid()) return QRect();
+        //return mPaintDrawable->pixelBoundingRect();
+        return QRect();
     }
 
     void movePress(const QPointF& pos);
@@ -98,10 +100,10 @@ private:
     ulong mLastTs;
     int mLastFrame = 0;
     ConnContextQPtr<PaintBox> mPaintDrawableBox;
-    qptr<AnimatedSurface> mPaintAnimSurface;
-    OnionSkin mPaintOnion;
+    //qptr<AnimatedSurface> mPaintAnimSurface;
+    //OnionSkin mPaintOnion;
     bool mPaintPressedSinceUpdate = false;
-    UsePointer<DrawableAutoTiledSurface> mPaintDrawable;
+    //UsePointer<DrawableAutoTiledSurface> mPaintDrawable;
     bool mChanged = false;
     Canvas * const mCanvas;
 };
diff --git a/src/core/Paint/simplebrushwrapper.cpp b/src/core/Paint/simplebrushwrapper.cpp
index 022d81f9..f2027ed8 100755
--- a/src/core/Paint/simplebrushwrapper.cpp
+++ b/src/core/Paint/simplebrushwrapper.cpp
@@ -18,18 +18,18 @@
 
 SimpleBrushWrapper::SimpleBrushWrapper(const QString &collName,
                                        const QString &brushName,
-                                       MyPaintBrush * const brush,
+                                       /*MyPaintBrush * const brush,*/
                                        const QByteArray& wholeFile) :
-    mBrush(brush), mWholeFile(wholeFile),
+    /*mBrush(brush),*/ mWholeFile(wholeFile),
     mCollectionName(collName), mBrushName(brushName) {
 }
 
 SimpleBrushWrapper::~SimpleBrushWrapper() {
-    mypaint_brush_unref(mBrush);
+    //mypaint_brush_unref(mBrush);
 }
 
 stdsptr<SimpleBrushWrapper> SimpleBrushWrapper::createDuplicate() {
-    auto brush = mypaint_brush_new_with_buckets(256);
+    /*auto brush = mypaint_brush_new_with_buckets(256);
     const char *data = mWholeFile.constData();
 
     if(!mypaint_brush_from_string(brush, data)) {
@@ -38,5 +38,6 @@ stdsptr<SimpleBrushWrapper> SimpleBrushWrapper::createDuplicate() {
     }
     return enve::make_shared<SimpleBrushWrapper>(
                 mCollectionName, mBrushName,
-                brush, mWholeFile);
+                brush, mWholeFile);*/
+    return nullptr;
 }
diff --git a/src/core/Paint/simplebrushwrapper.h b/src/core/Paint/simplebrushwrapper.h
index 26bf7c9c..a4c306c8 100755
--- a/src/core/Paint/simplebrushwrapper.h
+++ b/src/core/Paint/simplebrushwrapper.h
@@ -20,7 +20,7 @@
 #include <QColor>
 #include "pointhelpers.h"
 #include "smartPointers/ememory.h"
-#include "libmypaintincludes.h"
+//#include "libmypaintincludes.h"
 
 class CORE_EXPORT SimpleBrushWrapper : public StdSelfRef {
     e_OBJECT
@@ -29,24 +29,27 @@ public:
 
     stdsptr<SimpleBrushWrapper> createDuplicate();
 
-    MyPaintBrush * getBrush() const { return mBrush; }
+    //MyPaintBrush * getBrush() const { return mBrush; }
 
     QColor getColor() const {
-        const float h = getBaseValue(MYPAINT_BRUSH_SETTING_COLOR_H);
+        /*const float h = getBaseValue(MYPAINT_BRUSH_SETTING_COLOR_H);
         const float s = getBaseValue(MYPAINT_BRUSH_SETTING_COLOR_S);
         const float v = getBaseValue(MYPAINT_BRUSH_SETTING_COLOR_V);
         const float o = getBaseValue(MYPAINT_BRUSH_SETTING_OPAQUE);
         QColor col;
         col.setHsvF(qreal(h), qreal(s), qreal(v), qreal(o));
-        return col;
+        return col;*/ return QColor(Qt::black);
     }
 
     void setColor(const float hue,
                   const float saturation,
                   const float value) const {
-        setBaseValue(MYPAINT_BRUSH_SETTING_COLOR_H, clamp(hue, 0, 1));
+        Q_UNUSED(hue)
+        Q_UNUSED(saturation)
+        Q_UNUSED(value)
+        /*setBaseValue(MYPAINT_BRUSH_SETTING_COLOR_H, clamp(hue, 0, 1));
         setBaseValue(MYPAINT_BRUSH_SETTING_COLOR_S, clamp(saturation, 0, 1));
-        setBaseValue(MYPAINT_BRUSH_SETTING_COLOR_V, clamp(value, 0, 1));
+        setBaseValue(MYPAINT_BRUSH_SETTING_COLOR_V, clamp(value, 0, 1));*/
     }
 
     void setColor(const float hue,
@@ -63,34 +66,38 @@ public:
     }
 
     void setOpactiy(const float opacity) const {
-        setBaseValue(MYPAINT_BRUSH_SETTING_OPAQUE, clamp(opacity, 0, 1));
+        Q_UNUSED(opacity)
+        //setBaseValue(MYPAINT_BRUSH_SETTING_OPAQUE, clamp(opacity, 0, 1));
     }
 
     void incOpacity(const qreal inc) {
-        const float opacity = getBaseValue(MYPAINT_BRUSH_SETTING_OPAQUE);
-        setOpactiy(opacity + float(inc));
+        Q_UNUSED(inc)
+        //const float opacity = getBaseValue(MYPAINT_BRUSH_SETTING_OPAQUE);
+        //setOpactiy(opacity + float(inc));
     }
 
     void decOpacity(const qreal dec) {
         incOpacity(-dec);
     }
 
-    float getBaseValue(const MyPaintBrushSetting& id) const {
+    /*float getBaseValue(const MyPaintBrushSetting& id) const {
         return mypaint_brush_get_base_value(mBrush, id);
-    }
+    }*/
 
-    void setBaseValue(const MyPaintBrushSetting& id, const float val) const {
+    /*void setBaseValue(const MyPaintBrushSetting& id, const float val) const {
         mypaint_brush_set_base_value(mBrush, id, val);
-    }
+    }*/
 
     void setPaintBrushSize(const qreal size) const {
-        const float brushSize = static_cast<float>(size);
-        setBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC, brushSize);
+        Q_UNUSED(size)
+        /*const float brushSize = static_cast<float>(size);
+        setBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC, brushSize);*/
     }
 
     void incPaintBrushSize(const qreal inc) const {
-        const float sizeF = getBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC);
-        setPaintBrushSize(static_cast<qreal>(sizeF) + inc);
+        Q_UNUSED(inc)
+        /*const float sizeF = getBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC);
+        setPaintBrushSize(static_cast<qreal>(sizeF) + inc);*/
     }
 
     void decPaintBrushSize(const qreal dec) const {
@@ -105,29 +112,29 @@ public:
 
     void startEraseMode() const {
         setNormalMode();
-        setBaseValue(MYPAINT_BRUSH_SETTING_ERASER, 1);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_ERASER, 1);
     }
 
     void finishEraseMode() const {
-        setBaseValue(MYPAINT_BRUSH_SETTING_ERASER, 0);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_ERASER, 0);
     }
 
     void startAlphaLockMode() const {
         setNormalMode();
-        setBaseValue(MYPAINT_BRUSH_SETTING_LOCK_ALPHA, 1);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_LOCK_ALPHA, 1);
     }
 
     void finishAlphaLockMode() const {
-        setBaseValue(MYPAINT_BRUSH_SETTING_LOCK_ALPHA, 0);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_LOCK_ALPHA, 0);
     }
 
     void startColorizeMode() const {
         setNormalMode();
-        setBaseValue(MYPAINT_BRUSH_SETTING_COLORIZE, 1);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_COLORIZE, 1);
     }
 
     void finishColorizeMode() const {
-        setBaseValue(MYPAINT_BRUSH_SETTING_COLORIZE, 0);
+        //setBaseValue(MYPAINT_BRUSH_SETTING_COLORIZE, 0);
     }
 
     const QString& getBrushName() const {
@@ -139,15 +146,16 @@ public:
     }
 
     float getBrushSize() const {
-        return getBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC);
+        //return getBaseValue(MYPAINT_BRUSH_SETTING_RADIUS_LOGARITHMIC);
+        return 0.0;
     }
 protected:
     SimpleBrushWrapper(const QString& collName,
                        const QString& brushName,
-                       MyPaintBrush * const brush,
+                       /*MyPaintBrush * const brush,*/
                        const QByteArray& wholeFile);
 private:
-    MyPaintBrush * const mBrush;
+    //MyPaintBrush * const mBrush;
     const QByteArray mWholeFile;
     const QString mCollectionName;
     const QString mBrushName;
diff --git a/src/core/canvas.h b/src/core/canvas.h
index 6d280328..4d6c9f61 100755
--- a/src/core/canvas.h
+++ b/src/core/canvas.h
@@ -32,7 +32,7 @@
 #include "MovablePoints/segment.h"
 #include "MovablePoints/movablepoint.h"
 #include "Boxes/canvasrenderdata.h"
-#include "Paint/drawableautotiledsurface.h"
+//#include "Paint/drawableautotiledsurface.h"
 #include "canvasbase.h"
 #include "Paint/animatedsurface.h"
 #include <QAction>
diff --git a/src/core/filesourcescache.cpp b/src/core/filesourcescache.cpp
index 2ffeeeca..d9e775e9 100755
--- a/src/core/filesourcescache.cpp
+++ b/src/core/filesourcescache.cpp
@@ -46,7 +46,8 @@ bool isImageExt(const QString &extension) {
 }
 
 bool isLayersExt(const QString &ext) {
-    return FileExtensions::layers.contains(ext.toLower());
+    Q_UNUSED(ext)
+    return false; //FileExtensions::layers.contains(ext.toLower());
 }
 
 bool isEvExt(const QString &extension) {
@@ -87,4 +88,4 @@ QString FileExtensions::soundFilters() { return filters(sound); }
 
 QString FileExtensions::videoFilters() { return filters(video); }
 
-QString FileExtensions::layersFilters() { return filters(layers); }
+QString FileExtensions::layersFilters() { return QString(); /*filters(layers);*/ }
